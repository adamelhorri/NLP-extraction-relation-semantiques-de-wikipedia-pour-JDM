386;DET NOUN* ADP(de) DET NOUN VERB(classer) ADP(dans) DET NOUN*  => r_has_part ;1
387;DET NOUN* ADP(de) DET PROPN*  => r_has_part-1;2
388;ADP(comme) NOUN* ADP(de) NOUN*  => r_has_part ;1
389;ADP(comme) NOUN* ADP(de) NOUN*  => r_has_part-1;1
390;DET NOUN* ADJ PUNCT(,) PRON PUNCT(,) VERB(émettre) DET NOUN*  => r_has_part ;1
391;DET NOUN* VERB(ressembler) ADP(à) DET ADJ NOUN*  => r_has_part-1;1
392;ADJ NOUN* PUNCT(,) ADV ADP(de) DET PROPN*  => r_has_part-1;1
393;DET PROPN* PUNCT(,) NOUN PRON VERB(comprendre) ADV DET NOUN*  => r_has_part ;1
394;ADP(à) NOUN* DET ADJ NOUN ADP(de) NOUN*  => r_has_part ;1
395;ADP(de) NOUN* PUNCT(,) DET NOUN VERB(former) DET NOUN*  => r_has_part-1;1
396;DET NOUN* VERB(former) DET NOUN*  => r_has_part-1;1
397;DET NOUN* ADP(de) NOUN*  => r_has_part ;1
398;DET NOUN* ADP(de) NOUN ADV ADJ PUNCT(:) DET NOUN*  => r_has_part-1;1
399;ADP(de) NOUN* ADV ADJ PUNCT(:) DET NOUN*  => r_has_part ;1
400;NOUN* ADJ* PUNCT(,) NOUN*  => r_has_part-1;1
401;NOUN* ADJ* PUNCT(,) NOUN* ADJ PUNCT(,) NOUN*  => r_has_part-1;1
402;NOUN* ADJ* DET NOUN*  => r_has_part-1;1
403;PUNCT(() PROPN* PUNCT()) X PUNCT()) AUX(être) DET NOUN*  => r_has_part-1;1
404;DET NOUN* ADP(parmi) DET ADJ NOUN*  => r_has_part ;1
405;DET NOUN* ADP(parmi) DET ADJ NOUN ADP(de) DET NOUN*  => r_has_part ;1
406;DET NOUN* ADP(parmi) DET ADJ NOUN ADP(de) DET NOUN*  => r_has_part-1;1
407;DET ADJ* NOUN ADP(de) DET NOUN*  => r_has_part-1;1
408;ADP(en) NOUN* PRON AUX(être) VERB(appeler) ADV NOUN*  => r_has_part-1;1
409;NOUN* ADJ* PUNCT([) NUM PUNCT(]) PUNCT(,) NOUN*  => r_has_part-1;1
410;DET NOUN* ADV VERB(répandu) ADP(par) DET NOUN*  => r_has_part ;1
411;DET NOUN* ADJ ADJ PUNCT(,) NOUN*  => r_has_part ;1
412;DET NOUN* ADJ ADJ PUNCT(,) NOUN*  => r_has_part-1;1
413;NOUN ADJ* PUNCT(,) ADP(de) PRON DET*  => r_has_part ;1
414;NOUN ADJ* PUNCT(,) ADP(de) PRON DET NOUN PUNCT(«) NOUN*  => r_has_part ;1
415;NOUN ADJ* PUNCT(,) ADP(de) PRON DET NOUN PUNCT(«) NOUN*  => r_has_part-1;1
416;DET NOUN* PUNCT(«) NOUN PUNCT(») PUNCT(() NOUN*  => r_has_part ;1
417;PUNCT(() NOUN* VERB(dériver) ADP(de) DET NOUN*  => r_has_part-1;1
418;DET NOUN* PUNCT()) SCONJ ADP(pour) DET NOUN*  => r_has_part ;1
419;DET NOUN* PUNCT()) SCONJ ADP(pour) DET NOUN*  => r_has_part-1;1
