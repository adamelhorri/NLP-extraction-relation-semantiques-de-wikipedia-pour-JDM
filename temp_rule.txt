1;PUNCT(() PROPN* X PUNCT()) AUX(être) DET NOUN*  => r_isa ;66
2;PUNCT(() PROPN* X PUNCT()) AUX(être) DET NOUN ADP(de) NOUN*  => r_isa ;67
0;NOUN* AUX(être) DET NOUN* => r_isa ;100
3;DET NOUN* PUNCT(,) CCONJ(ou) NOUN*  => r_isa ;100
4;DET NOUN* ADP(de) NOUN*  => r_isa inverse ;82
5;DET NOUN* ADP(de) NOUN ADJ PUNCT(,) ADP(de) DET NOUN*  => r_isa ;35
6;DET NOUN* ADP(de) NOUN ADJ PUNCT(,) ADP(de) DET NOUN*  => r_isa inverse ;35
7;ADP(de) NOUN* ADJ PUNCT(,) ADP(de) DET NOUN*  => r_isa inverse ;35
8;DET NOUN* ADP(de) DET PROPN*  => r_isa inverse ;63
9;ADJ NOUN* ADP(de) DET NOUN*  => r_isa ;13
10;ADJ NOUN* ADP(de) DET NOUN*  => r_isa inverse ;13
11;DET NOUN* PUNCT(,) PRON ADP(de) DET NOUN ADP(de) PROPN*  => r_isa inverse ;15
12;DET NOUN* ADP(de) DET NOUN NUM DET NOUN*  => r_isa ;13
13;DET NOUN* NUM DET NOUN*  => r_isa ;12
14;DET NOUN* ADP(entre) DET NOUN*  => r_isa ;23
15;DET NOUN* CCONJ(et) DET NOUN*  => r_isa ;23
16;DET NOUN* CCONJ DET NOUN*  => r_isa inverse ;2
17;DET NOUN* ADP(de) DET NOUN*  => r_isa ;21
18;DET NOUN* ADP(de) DET NOUN ADP(à) PROPN*  => r_isa inverse ;14
19;ADP(à) PROPN* VERB(dater) ADP(de) DET NOUN*  => r_isa ;15
20;DET NOUN* PUNCT(,) SCONJ DET NOUN*  => r_isa ;13
21;DET NOUN* PUNCT(,) SCONJ DET NOUN*  => r_isa inverse ;13
22;ADP(en) NOUN* PUNCT(,) PRON VERB DET NOUN*  => r_isa inverse ;4
23;DET NOUN* ADJ VERB(donner) ADP(à) DET NOUN*  => r_isa ;14
24;PUNCT(,) NOUN* VERB(pouvoir) VERB(désigner) DET NOUN ADP(de) DET NOUN*  => r_isa ;16
25;DET NOUN* ADP(de) DET NOUN*  => r_isa inverse ;23
26;DET NOUN* ADP(de) DET NOUN PUNCT(:) DET NOUN*  => r_isa inverse ;14
27;DET NOUN* PUNCT(:) DET NOUN PUNCT(«) NOUN*  => r_isa inverse ;14
28;PUNCT(«) NOUN* ADJ PUNCT(») PRON VERB(appliquer) ADP(à) DET NOUN*  => r_isa ;16
29;DET NOUN* CCONJ NOUN*  => r_isa inverse ;2
30;DET NOUN* CCONJ(ou) NOUN ADP(de) ADJ NOUN*  => r_isa ;14
31;ADJ NOUN* PUNCT(,) ADV SCONJ DET NOUN*  => r_isa ;13
32;ADJ NOUN* PUNCT(,) ADV SCONJ DET NOUN*  => r_isa inverse ;13
33;ADP(de) NOUN* ADJ VERB PUNCT([) NUM PUNCT(]) ADP(en) NOUN*  => r_isa inverse ;6
34;DET NOUN* VERB(avoir) DET NOUN*  => r_isa ;13
35;DET NOUN* VERB DET NOUN*  => r_isa inverse ;2
36;DET NOUN* ADJ VERB ADV DET ADJ NOUN*  => r_isa inverse ;2
37;DET NOUN* ADJ CCONJ(ou) X NOUN* AUX(être) DET NOUN*  => r_isa ;14
38;X NOUN* AUX(être) DET NOUN*  => r_isa ;13
39;ADP(pour) NOUN* PUNCT(,) ADP(dans) PRON DET NOUN*  => r_isa ;15
40;DET NOUN* VERB ADP(sur) DET NOUN ADP(de) NOUN*  => r_isa inverse ;4
41;DET NOUN* ADP(de) NOUN ADP(sous) DET NOUN*  => r_isa ;14
42;ADV NOUN* ADP(dans) DET NOUN*  => r_isa inverse ;3
43;ADV NOUN* ADP(dans) DET NOUN ADP(de) DET NOUN*  => r_isa inverse ;4
44;ADJ NOUN* ADJ PUNCT(,) DET PROPN CCONJ DET PROPN*  => r_isa inverse ;3
45;DET PROPN* PUNCT(,) VERB(organiser) DET ADJ NOUN*  => r_isa ;4
46;DET NOUN* ADP(de) DET NOUN ADP(pour) DET NOUN*  => r_isa inverse ;4
47;DET NOUN* ADP(pour) DET NOUN*  => r_isa ;3
48;ADP(de) NOUN* ADJ SCONJ DET NOUN*  => r_isa inverse ;3
49;NUM NOUN* CCONJ NUM NOUN*  => r_isa inverse ;2
50;DET NOUN* AUX(être) DET NOUN ADP(de) NOUN*  => r_isa ;4
51;ADP(de) NOUN* ADJ CCONJ(soit) DET NOUN*  => r_isa ;4
52;DET NOUN* ADJ ADP(de) DET NOUN*  => r_isa inverse ;3
53;DET NOUN* VERB ADP(de) DET NOUN*  => r_isa inverse ;3
54;NUM NOUN* PUNCT(,) DET NOUN*  => r_isa ;3
55;NUM NOUN* PUNCT(,) DET NOUN*  => r_isa inverse ;3
56;VERB NOUN* ADP(de) DET NOUN*  => r_isa inverse ;3
57;DET NOUN* ADP(de) NOUN ADJ(carnivore) PUNCT(,) ADP(de) DET NOUN*  => r_isa ;26
58;DET NOUN* ADP(de) NOUN ADJ(carnivore) PUNCT(,) ADP(de) DET NOUN*  => r_isa inverse ;26
59;ADP(de) NOUN* ADJ(carnivore) PUNCT(,) ADP(de) DET NOUN*  => r_isa inverse ;26
60;ADJ(ancien) NOUN* ADP(de) DET NOUN*  => r_isa ;4
61;ADJ(ancien) NOUN* ADP(de) DET NOUN*  => r_isa inverse ;4
62;DET NOUN* PUNCT(,) PRON(celui) ADP(de) DET NOUN ADP(de) PROPN*  => r_isa inverse ;6
63;DET NOUN* ADP(de) DET NOUN NUM(2010) DET NOUN*  => r_isa ;4
64;DET NOUN* NUM(2010) DET NOUN*  => r_isa ;3
65;DET NOUN* CCONJ(et) DET NOUN*  => r_isa inverse ;13
66;ADP(en) NOUN* PUNCT(,) PRON VERB(protéger) DET NOUN*  => r_isa inverse ;11
67;DET NOUN* CCONJ(ou) NOUN*  => r_isa inverse ;8
68;ADP(de) NOUN* ADJ VERB(attester) PUNCT([) NUM PUNCT(]) ADP(en) NOUN*  => r_isa inverse ;13
69;DET NOUN* VERB(avoir) DET NOUN*  => r_isa inverse ;9
70;DET NOUN* ADJ VERB(avoir) ADV DET ADJ NOUN*  => r_isa inverse ;12
71;DET NOUN* VERB(évoluer) ADP(sur) DET NOUN ADP(de) NOUN*  => r_isa inverse ;12
72;DET NOUN* AUX(être) VERB(baser) ADP(sur) DET NOUN*  => r_isa inverse ;11
73;ADP(en) NOUN* PUNCT(,) ADP(selon) DET NOUN ADP(de) DET NOUN*  => r_isa ;12
74;DET NOUN* ADP(de) DET NOUN PUNCT(,) ADJ DET NOUN*  => r_isa ;12
75;DET NOUN* VERB(correspondre) ADP(à) DET NOUN*  => r_isa inverse ;11
76;DET NOUN* PUNCT(,) DET NOUN*  => r_isa ;8
77;DET NOUN* PUNCT(,) DET NOUN*  => r_isa inverse ;9
78;DET NOUN* PUNCT(,) DET NOUN CCONJ(ou) DET NOUN*  => r_isa ;11
79;DET NOUN* PUNCT(,) DET NOUN CCONJ(ou) DET NOUN*  => r_isa inverse ;12
80;DET NOUN* CCONJ(ou) DET NOUN*  => r_isa ;8
81;DET NOUN* CCONJ(ou) DET NOUN*  => r_isa inverse ;9
82;DET NOUN* CCONJ(ou) DET NOUN VERB(pouvoir) VERB(former) DET NOUN*  => r_isa ;12
83;DET NOUN* VERB(pouvoir) VERB(former) DET NOUN*  => r_isa ;9
84;DET NOUN* VERB(pouvoir) VERB(former) DET NOUN*  => r_isa inverse ;10
85;DET NOUN* AUX(être) VERB(destiner) ADP(à) VERB(contenir) DET NOUN*  => r_isa inverse ;12
86;DET NOUN* ADJ ADP(de) NOUN*  => r_isa inverse ;9
87;DET NOUN* ADJ ADP(de) NOUN PUNCT(() PROPN*  => r_isa inverse ;11
88;ADP(de) NOUN* PUNCT(() PROPN*  => r_isa inverse ;8
89;DET NOUN* VERB(exclure) PUNCT(() NOUN*  => r_isa ;8
90;PUNCT(() NOUN* PUNCT(,) NOUN*  => r_isa inverse ;8
91;DET NOUN* ADV VERB(devoir) VERB(contenir) ADV DET NOUN*  => r_isa inverse ;12
92;DET NOUN* ADJ PUNCT(() NOUN*  => r_isa ;8
93;DET NOUN* ADJ PUNCT(() NOUN*  => r_isa inverse ;9
94;PUNCT(() NOUN* PUNCT()) PUNCT(,) ADJ PUNCT(() NOUN*  => r_isa inverse ;11
95;PUNCT(() NOUN* PUNCT()) CCONJ(ou) ADV PUNCT(() NOUN*  => r_isa ;10
96;PUNCT(() NOUN* PUNCT(,) NOUN*  => r_isa ;7
97;PUNCT(,) NOUN* PUNCT(...) PUNCT()) PUNCT(,) DET ADJ NOUN*  => r_isa ;11
98;DET NOUN* VERB(correspondre) ADP(à) DET NOUN*  => r_isa ;9
99;DET NOUN* ADP(de) DET NOUN AUX(être) DET NOUN*  => r_isa inverse ;12
100;DET NOUN* AUX(être) DET NOUN*  => r_isa inverse ;9
101;DET NOUN* AUX(être) DET NOUN ADJ CCONJ(ou) DET NOUN*  => r_isa ;12
102;DET NOUN* ADJ CCONJ(ou) DET NOUN*  => r_isa ;9
103;DET NOUN* ADP(en) NOUN*  => r_isa inverse ;8
104;DET NOUN* ADJ ADV ADP(de) DET NOUN*  => r_isa ;10
105;DET NOUN* PUNCT(,) NOUN*  => r_isa ;7
106;ADJ NOUN* PUNCT(,) VERB(utiliser) ADV DET NOUN*  => r_isa inverse ;11
107;DET NOUN* ADP(de) NOUN PUNCT(,) DET NOUN*  => r_isa ;10
108;ADP(de) NOUN* PUNCT(,) DET NOUN*  => r_isa ;8
109;DET NOUN* ADP(pour) PRON DET NOUN*  => r_isa ;9
110;DET NOUN* ADP(pour) PRON DET NOUN*  => r_isa inverse ;10
111;DET NOUN* ADP(de) DET NOUN VERB(faire) NOUN*  => r_isa ;10
112;DET NOUN* ADP(de) DET NOUN VERB(faire) NOUN*  => r_isa inverse ;11
113;ADP(de) NOUN* ADP(chez) DET NOUN*  => r_isa ;8
114;ADP(en) NOUN* DET NOUN*  => r_isa ;7
115;NOUN* PUNCT(·) NOUN*  => r_isa ;6
116;NOUN* PUNCT(·) NOUN*  => r_isa inverse ;7
117;PUNCT(·) NOUN* DET NOUN*  => r_isa ;7
118;PUNCT(·) NOUN* DET NOUN*  => r_isa inverse ;8
119;PUNCT(() PROPN* PUNCT()) CCONJ(ou) PROPN AUX(être) DET NOUN*  => r_isa ;11
120;CCONJ(ou) PROPN* AUX(être) DET NOUN*  => r_isa ;8
121;DET NOUN* ADP(de) NOUN ADJ ADP(de) DET NOUN*  => r_isa ;11
122;DET NOUN* ADP(de) NOUN ADJ ADP(de) DET NOUN*  => r_isa inverse ;12
123;ADP(de) NOUN* ADJ ADP(de) DET NOUN ADP(de) DET NOUN*  => r_isa inverse ;13
124;DET NOUN* ADP(de) DET NOUN CCONJ(et) ADP(de) DET NOUN*  => r_isa inverse ;13
125;DET NOUN* CCONJ(et) ADP(de) DET NOUN*  => r_isa inverse ;10
126;DET NOUN* CCONJ(et) ADP(de) DET NOUN ADP(de) DET NOUN*  => r_isa inverse ;13
127;NUM NOUN* PUNCT(:) DET PUNCT(«) ADJ NOUN*  => r_isa ;10
128;NUM NOUN* PUNCT(:) DET PUNCT(«) ADJ NOUN*  => r_isa inverse ;11
129;PUNCT(,) ADJ* DET NOUN VERB(correspondre) ADP(à) DET NOUN*  => r_carac inverse ;12
130;DET NOUN* PUNCT(,) DET NOUN*  => r_carac inverse ;9
131;DET NOUN* PUNCT(,) DET NOUN CCONJ(ou) DET NOUN*  => r_carac inverse ;12
132;DET ADJ* NOUN*  => r_carac inverse ;35
133;DET ADJ* NOUN ADP(par) NOUN*  => r_carac inverse ;9
134;DET ADJ* NOUN ADP(par) NOUN VERB(devoir)*  => r_carac inverse ;10
135;DET ADJ* NOUN ADP(par) NOUN VERB(devoir) AUX(être)*  => r_carac inverse ;11
136;NOUN ADJ* ADJ*  => r_carac ;45
137;NOUN ADJ* ADJ CCONJ(ou) ADJ*  => r_carac inverse ;9
138;ADJ ADJ* CCONJ(ou) ADJ*  => r_carac inverse ;8
139;PUNCT(() NOUN* PUNCT(,) NOUN PUNCT(,) NOUN*  => r_carac ;9
140;PUNCT(,) NOUN* PUNCT(,) NOUN*  => r_carac ;7
141;PUNCT(,) NOUN* PUNCT(...) PUNCT()) PUNCT(,) DET ADJ NOUN*  => r_carac inverse ;12
142;DET ADJ* NOUN VERB(devoir)*  => r_carac inverse ;8
143;DET ADJ* NOUN VERB(devoir) AUX(être)*  => r_carac inverse ;9
144;DET ADJ* NOUN VERB(devoir) AUX(être) VERB(classer) ADP(dans) DET NOUN*  => r_carac inverse ;13
145;ADP(en) NOUN* PUNCT(,) SCONJ DET NOUN*  => r_carac inverse ;10
146;DET NOUN* ADP(de) DET NOUN AUX(être) DET NOUN*  => r_carac ;11
147;DET NOUN* ADJ CCONJ(ou) DET NOUN*  => r_carac inverse ;10
148;DET NOUN* ADJ CCONJ(ou) DET NOUN ADP(en) NOUN*  => r_carac ;11
149;NOUN ADJ* CCONJ(ou) DET NOUN*  => r_carac inverse ;9
150;NOUN ADJ* CCONJ(ou) DET NOUN ADP(en) NOUN*  => r_carac ;10
151;NOUN ADJ* CCONJ(ou) DET NOUN ADP(en) NOUN*  => r_carac inverse ;11
152;DET NOUN* ADP(en) NOUN*  => r_carac ;7
153;DET NOUN* PRON VERB(avoir) DET NOUN*  => r_carac inverse ;10
154;DET NOUN* PUNCT(,) NOUN*  => r_carac inverse ;8
155;PUNCT(,) NOUN* ADJ CCONJ(et) ADP(à) ADJ NOUN*  => r_carac inverse ;11
156;ADP(à) ADJ* NOUN*  => r_carac inverse ;7
157;ADP(à) ADJ* NOUN PUNCT(,) VERB(utiliser) ADV DET NOUN*  => r_carac ;11
158;ADP(à) ADJ* NOUN PUNCT(,) VERB(utiliser) ADV DET NOUN*  => r_carac inverse ;12
159;ADJ NOUN* PUNCT(,) VERB(utiliser) ADV DET NOUN*  => r_carac ;10
160;DET NOUN* ADJ CCONJ(et) ADJ ADP(pour) VERB(percevoir) DET NOUN*  => r_carac inverse ;13
161;DET NOUN* ADP(de) NOUN*  => r_carac ;7
162;DET NOUN* ADP(de) NOUN PUNCT(,) DET NOUN*  => r_carac ;10
163;ADV ADJ* ADV ADP(de) DET NOUN*  => r_carac inverse ;10
164;DET NOUN* ADP(de) DET NOUN VERB(faire) NOUN*  => r_carac ;10
165;DET NOUN* ADP(de) NOUN ADP(chez) DET NOUN*  => r_carac ;10
166;DET NOUN* ADJ VERB(passer) ADP(dans) DET NOUN*  => r_carac inverse ;11
167;NOUN ADJ* VERB(passer) ADP(dans) DET NOUN ADJ*  => r_carac inverse ;11
168;NOUN ADJ* ADP(de) DET NOUN PUNCT(,) CCONJ(ou) DET NOUN*  => r_carac inverse ;13
